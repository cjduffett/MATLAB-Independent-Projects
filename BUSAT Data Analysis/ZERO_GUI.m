function ZERO_GUI()
%% General User Interface for BUSAT data analysis
% Code developed by:
% Carlton Duffett
% Sam Cheney
% 11 December 2012

clear

% create the figure window
f = figure(...
    'Visible','off',...
    'Units','normalized',...
    'MenuBar','none',...
    'NumberTitle','off',...
    'Position', [0.1 0.1 0.8 0.8],...
    'Name','Accel/Gyro Project 3 GUI');

movegui('center')
    
% import appropriate file data from directory
data = dir('*.txt');

% file names:
[fileAname fileBname fileCname] = data.name;

% file sizes:
[fileAsize fileBsize fileCsize] = data.bytes;

% file dates:
[fileAdate fileBdate fileCdate] = data.date;

% File Information:
Ainfo = {'File General Info:' ...
         '' ...
         sprintf('File name: %s',fileAname) ...
         sprintf('File size: %d bytes',fileAsize) ... 
         sprintf('Date created: %s',fileAdate(1:11))};
Binfo = {'File General Info:' ...
         '' ...
         sprintf('File name: %s',fileBname) ...
         sprintf('File size: %d bytes',fileBsize) ... 
         sprintf('Date created: %s',fileBdate(1:11))};
Cinfo = {'File General Info:' ...
         '' ...
         sprintf('File name: %s',fileCname) ...
         sprintf('File size: %d bytes',fileCsize) ... 
         sprintf('Date created: %s',fileCdate(1:11))};

% read file using loadData
[C_x C_y C_z G_x G_y G_z] = loadData(fileAname); % default is fileA

%% Prepare the BUSAT logo watermark

% load image
img = imread('BUlogo.png');

R = img(:,:,1);%separate RGB
G = img(:,:,2);
B = img(:,:,3);

% Replace the yellow background with white
repvecR = find(R == mode(mode(double(R))));% mode of RGB
repvecG = find(G == mode(mode(double(G))));
repvecB = find(B == mode(mode(double(B))));

reppixels = intersect(intersect(repvecR,repvecG),repvecB);% yellow pixels

% replace yellow pixels w/ white
R(reppixels) = 255;
G(reppixels) = 255;
B(reppixels) = 255;

% combine RGB
newimg(:,:,1) = R;
newimg(:,:,2) = G;
newimg(:,:,3) = B;

% adjusted image
newimg = uint8(newimg);

%% Plots

% Accelerometer axis
C_axis = axes(...
    'Parent',f,...
    'Visible','off',...
    'Units','normalized',...
    'Position',[0.2 0.6 0.7 0.3]); 

% plot default accelerometer data
hold(C_axis,'on')
    C_xplot = plot(1:length(C_x),C_x,'r','Visible','off');
    C_yplot = plot(1:length(C_y),C_y,'g','Visible','off');
    C_zplot = plot(1:length(C_z),C_z,'b','Visible','off');
hold(C_axis,'off')

title('Accelerometer')
xlabel('Sample Number')
ylabel('Acceleration in G')
legend({'X','Y','Z'})
                           
% Gyroscope axis
G_axis = axes(...
    'Parent',f,...
    'Visible','off',...
    'Units','normalized',...
    'Position',[0.2 0.1 0.7 0.3]);

% plot default gyroscope data
hold(G_axis,'on')
    G_xplot = plot(1:length(G_x),G_x,'r','Visible','off');
    G_yplot = plot(1:length(G_y),G_y,'g','Visible','off');
    G_zplot = plot(1:length(G_z),G_z,'b','Visible','off');
hold(G_axis,'off')
 
title('Gyroscope')
xlabel('Sample Number')
ylabel('Acceleration in rads/s^2')
legend({'Pitch','Roll','Yaw'})

%%  Radio Buttons

% Accelerometer buttons
X_plot_button = uicontrol(...
    'Visible','off',...
    'Style','radiobutton',...
    'String','X data',...
    'Value',1,...
    'Units','normalized',...
    'Position',[0.93 0.81 0.05 0.025],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'Callback',{@plotbuttonfn,1});

Y_plot_button = uicontrol(...
    'Visible','off',...
    'Style','radiobutton',...
    'String','Y data',...
    'Value',1,...
    'Units','normalized',...
    'Position',[0.93 0.77 0.05 0.025],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'Callback',{@plotbuttonfn,2});

Z_plot_button = uicontrol(...
    'Visible','off',...
    'Style','radiobutton',...
    'String','Z data',...
    'Value',1,...
    'Units','normalized',...
    'Position',[0.93 0.73 0.05 0.025],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'Callback',{@plotbuttonfn,3});

% Gyroscope buttons
Pitch_plot_button = uicontrol(...
    'Visible','off',...
    'Style','radiobutton',...
    'String','Pitch data',...
    'Value',1,...
    'Units','normalized',...
    'Position',[0.93 0.31 0.05 0.025],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'Callback',{@plotbuttonfn,4});
    

Roll_plot_button = uicontrol(...
    'Visible','off',...
    'Style','radiobutton',...
    'String','Roll data',...
    'Value',1,...
    'Units','normalized',...
    'Position',[0.93 0.27 0.05 0.025],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'Callback',{@plotbuttonfn,5});

Yaw_plot_button = uicontrol(...
    'Visible','off',...
    'Style','radiobutton',...
    'String','Yaw data',...
    'Value',1,...
    'Units','normalized',...
    'Position',[0.93 0.23 0.05 0.025],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'Callback',{@plotbuttonfn,6});

%make all visible
set([...
    X_plot_button ...
    Y_plot_button ...
    Z_plot_button ...
    Pitch_plot_button ...
    Roll_plot_button ...
    Yaw_plot_button ...
    C_axis ...
    C_xplot ...
    C_yplot ...
    C_zplot ...
    G_axis ...
    G_xplot ...
    G_yplot ...
    G_zplot ...
    f], ...
    'Visible','on')

%% Radio Button Callback Function

function plotbuttonfn(~,~,button) % '~' does not store source/eventdata
    
    switch button
        
        case 1 % X
            if get(X_plot_button,'Value') == 0
                set(C_xplot,'Visible','off')
            else
                set(C_xplot,'Visible','on')
            end
            
        case 2 % Y
            if get(Y_plot_button,'Value') == 0
                set(C_yplot,'Visible','off')
            else
                set(C_yplot,'Visible','on')
            end
            
        case 3 % Z
            if get(Z_plot_button,'Value') == 0
                set(C_zplot,'Visible','off')
            else
                set(C_zplot,'Visible','on')
            end
            
        case 4 % Pitch
            if get(Pitch_plot_button,'Value') == 0
                set(G_xplot,'Visible','off')
            else
                set(G_xplot,'Visible','on')
            end
            
        case 5 % Roll
            if get(Roll_plot_button,'Value') == 0
                set(G_yplot,'Visible','off')
            else
                set(G_yplot,'Visible','on')
            end
            
        case 6 % Yaw
            if get(Yaw_plot_button,'Value') == 0
                set(G_zplot,'Visible','off')
            else
                set(G_zplot,'Visible','on')
            end
    end 
end

%% Info box

Info_text = uicontrol(...
    'Visible','on',...
    'Style','text',...
    'Units','normalized',...
    'Position',[0.01 0.9 0.14 0.08],...
    'BackgroundColor',[1 1 1],...
    'String',Ainfo,... % default is file A
    'HorizontalAlignment','left');

%% File drop down menu

% drop down menu
DD_menu = uicontrol(...
    'Style','popupmenu',...
    'Units','normalized',...
    'Position',[0.0125 0.8 0.13 0.025],...
    'String',{fileAname fileBname fileCname});

% load pushbutton
Load_psb = uicontrol(...
    'Style','pushbutton',...
    'Units','normalized',...
    'Position',[0.035 0.75 0.08 0.03],...
    'String','Load Data',...
    'Callback',@loadpsbfn);

set([DD_menu Load_psb],'Visible','on')

% Load_psb callback function
function loadpsbfn(~,~)
    set(Load_psb,'String','LOADING...','BackgroundColor','white')
    whichfile = get(DD_menu,'Value');

    switch whichfile

        case 1 % file A
            [C_x C_y C_z G_x G_y G_z] = loadData(fileAname);
            set(Info_text,'String',Ainfo)

        case 2 % file B
            [C_x C_y C_z G_x G_y G_z] = loadData(fileBname);
            set(Info_text,'String',Binfo)

        case 3 % file C
            [C_x C_y C_z G_x G_y G_z] = loadData(fileCname);
            set(Info_text,'String',Cinfo)
    end
    
        sampleSize = round(get(Filter_slider,'Value'));
        % adjusts vectors using a moving average
        C_xA = mvgAverage(C_x,sampleSize);
        C_yA = mvgAverage(C_y,sampleSize);
        C_zA = mvgAverage(C_z,sampleSize);
        G_xA = mvgAverage(G_x,sampleSize);
        G_yA = mvgAverage(G_y,sampleSize);
        G_zA = mvgAverage(G_z,sampleSize);
              
    % Plot new data
    
    if get(nFilterButtongroup,'SelectedObject') == Noise_button_1
    % if filtering is currently turned on
    
        % Plot adjusted data
        
        % accelerometer
        set(C_xplot,...
            'XData',1:length(C_xA),...
            'YData',C_xA);
        set(C_yplot,...
            'XData',1:length(C_yA),...
            'YData',C_yA);
        set(C_zplot,...
            'XData',1:length(C_zA),...
            'YData',C_zA);
        
        % gyroscope
        set(G_xplot,...
            'XData',1:length(G_xA),...
            'YData',G_xA);
        set(G_yplot,...
            'XData',1:length(G_yA),...
            'YData',G_yA);
        set(G_zplot,...
            'XData',1:length(G_zA),...
            'YData',G_zA);
    else
    % if filtering is currently turned off
    
        % Plot original data
        
        % accelerometer
        set(C_xplot,...
            'XData',1:length(C_x),...
            'YData',C_x);
        set(C_yplot,...
            'XData',1:length(C_y),...
            'YData',C_y);
        set(C_zplot,...
            'XData',1:length(C_z),...
            'YData',C_z);
        
        % gyroscope
        set(G_xplot,...
            'XData',1:length(G_x),...
            'YData',G_x);
        set(G_yplot,...
            'XData',1:length(G_y),...
            'YData',G_y);
        set(G_zplot,...
            'XData',1:length(G_z),...
            'YData',G_z);
    end
    
    pause(.1)

    % reset load pushbutton
    set(Load_psb,...
        'String','Load Data',....
        'BackgroundColor',[0.831373 0.815686 0.784314])
    
    % reset radio buttons
    set([...
        X_plot_button ...
        Y_plot_button ...
        Z_plot_button ...
        Pitch_plot_button ...
        Roll_plot_button ...
        Yaw_plot_button],...
        'Value',1)

end

%% Filtering

% filter toggle button
nFilterButtongroup = uibuttongroup(...
    'Visible','off',...
    'Title','Noise Filter',...
    'Units','Normalized',...
    'Position',[0.037 0.6 0.075 0.1]);

% noise on/off switch
Noise_button_1 = uicontrol(...
    'Style','Radiobutton',...
    'Parent',nFilterButtongroup,...
    'String','ON',...
    'FontUnits','Normalized',...
    'Units','Normalized',...
    'Position',[0.1 0.65 0.8 0.3],...
    'HandleVisibility','off');

Noise_button_2 = uicontrol(...
    'Style','Radiobutton',...
    'Parent',nFilterButtongroup,...
    'String','OFF',...
    'FontUnits','Normalized',...
    'Units','Normalized',...
    'Position',[0.1 0.2 0.8 0.3],...
    'HandleVisibility','off');

% default sampleSize
sampleSize = 3;

set(nFilterButtongroup,'SelectionChangeFcn',@filterfn);
set(nFilterButtongroup,'SelectedObject',Noise_button_2);
set(nFilterButtongroup,'Visible','on');

% noise filter callback function
function filterfn(~,~)
    
    if get(nFilterButtongroup,'SelectedObject') == Noise_button_1
        
        % get sample size
        sampleSize = round(get(Filter_slider,'Value'));
        
        % adjusts vectors using a moving average
        C_xA = mvgAverage(C_x,sampleSize);
        C_yA = mvgAverage(C_y,sampleSize);
        C_zA = mvgAverage(C_z,sampleSize);
        G_xA = mvgAverage(G_x,sampleSize);
        G_yA = mvgAverage(G_y,sampleSize);
        G_zA = mvgAverage(G_z,sampleSize);
        
        % plot new data
        
        set(C_xplot,...
            'XData',1:length(C_xA),...
            'YData',C_xA);
        set(C_yplot,...
            'XData',1:length(C_yA),...
            'YData',C_yA);
        set(C_zplot,...
            'XData',1:length(C_zA),...
            'YData',C_zA);
        
        set(G_xplot,...
            'XData',1:length(G_xA),...
            'YData',G_xA);
        set(G_yplot,...
            'XData',1:length(G_yA),...
            'YData',G_yA);
        set(G_zplot,...
            'XData',1:length(G_zA),...
            'YData',G_zA);
        
        % show sample size and recalculation objects
        set([Filter_slider Min_text Max_text Title_text Recalc_button],...
            'Visible','on')
    else
        
        % restore original data
        set(C_xplot,...
            'XData',1:length(C_x),...
            'YData',C_x);
        set(C_yplot,...
            'XData',1:length(C_y),...
            'YData',C_y);
        set(C_zplot,...
            'XData',1:length(C_z),...
            'YData',C_z);
        
        set(G_xplot,...
            'XData',1:length(G_x),...
            'YData',G_x);
        set(G_yplot,...
            'XData',1:length(G_y),...
            'YData',G_y);
        set(G_zplot,...
            'XData',1:length(G_z),...
            'YData',G_z);
       
        % hide sample size and recalculation objects
        set([Filter_slider Min_text Max_text Title_text Recalc_button],...
            'Visible','off')
    end
end

% filter slider
Filter_slider = uicontrol(...
    'Style','slider',...
    'Visible','off',...
    'Units','normalized',...
    'Position',[0.025 0.5 0.1 0.025],...
    'Value',3,...
    'Min',2,...
    'Max',10,...
    'SliderStep',[(1/9) (1/3)],...
    'Callback',@sliderfn);

% slider labels
Min_text = uicontrol(...
    'Style','text',...
    'Visible','off',...
    'Units','normalized',...
    'Position',[0.01 0.497 0.01 0.025],...
    'String','2',...
    'BackgroundColor',[0.8 0.8 0.8]);

Max_text = uicontrol(...
    'Style','text',...
    'Visible','off',...
    'Units','normalized',...
    'Position',[0.126 0.497 0.02 0.025],...
    'String','10',...
    'BackgroundColor',[0.8 0.8 0.8]);

Title_text = uicontrol(...
    'Style','text',...
    'Visible','off',...
    'Units','normalized',...
    'Position',[0.03 0.527 0.085 0.025],...
    'String','Sample Size: 3',...
    'BackgroundColor',[0.8 0.8 0.8]);

% recalculation button
Recalc_button = uicontrol(...
    'Style','pushbutton',...
    'Visible','off',...
    'Units','normalized',...
    'Position',[0.035 0.42 0.08 0.03],...
    'String','Recalculate',...
    'Callback',@filterfn);

    % slider callback function
    function sliderfn(~,~)
        sampleSize = round(get(Filter_slider,'Value'));
        label = sprintf('Sample Size: %d',sampleSize);
        set(Title_text,'String',label)
    end
 
%% Screen capture

% screenshot button 
Screen_button = uicontrol(...
    'Style','pushbutton',...
    'Units','normalized',...
    'Position',[0.04 0.04 0.075 0.05],...
    'String','Screen Capture',...
    'BackgroundColor',[0.0625 1.0000 0.9375],...
    'Callback',@screenshotfn);

% screen shot callback function
function screenshotfn(~,~)
    
    % screenshot button visibility
    set(Screen_button,'Visible','off')

    % center figure window
    movegui('center')
    saveas(f,'Sshot.png') % save figure window
    
    close(f) % close figure
    
    % play camera sound
    [y,Fs] = wavread('camera.wav');
    sound(y,Fs)
    
    % new figure window
    figure(...   
        'Visible','on',...
        'Units','normalized',...
        'Position', [0.1 0.1 0.8 0.8],...
        'Name','Screenshot');
    
    % load saved screenshot
    windowimg = imread('Sshot.png');
    imshow(windowimg)
    
    % mouse location
    [Xclick Yclick] = ginput(1);
    
    % error check watermark positioning
    [X Y ~] = size(windowimg);
    [r c h] = size(newimg);
    
    % requested position exceeds screenshot dimensions
    while round(Xclick - c/2) <= 0 || round(Xclick - c/2) > X ...
            || round(Yclick - r/2) <= 0 || round(Yclick - r/2) > Y
        
        disp('ERROR: watermark position exceeds screenshot dimensions')
        
        % get new position
        [Xclick Yclick] = ginput(1);
        
    end
    
    % superimpose image in desired location
    for i = 1:r
        for j = 1:c
            for k = 1:h
                windowimg(round(Yclick - r/2) + i,...
                    round(Xclick - c/2) + j,...
                    k) = newimg(i,j,k);
            end
        end
    end
    
    % display image with watermark
    hold on
    image(windowimg,'AlphaData',.2)
    
end 

end